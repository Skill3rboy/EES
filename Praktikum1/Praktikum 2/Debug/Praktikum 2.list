
Praktikum 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000059c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000760  08000760  00001760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000788  08000788  00001790  2**0
                  CONTENTS
  4 .ARM          00000000  08000788  08000788  00001790  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000788  08000790  00001790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000788  08000788  00001788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800078c  0800078c  0000178c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001790  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000790  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000790  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001790  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008b3  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000028e  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00002308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000080  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013c5  00000000  00000000  00002440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c62  00000000  00000000  00003805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004f03  00000000  00000000  00004467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000936a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000218  00000000  00000000  000093b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000095c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000748 	.word	0x08000748

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000748 	.word	0x08000748

08000204 <GPIO_PeriClockControl>:
#include "GPIO_Driver.h"

/*
 * Peripheral Clock setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == SET){
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d157      	bne.n	80002c6 <GPIO_PeriClockControl+0xc2>
		if(pGPIOx == GPIOA){
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a59      	ldr	r2, [pc, #356]	@ (8000380 <GPIO_PeriClockControl+0x17c>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800021e:	4b59      	ldr	r3, [pc, #356]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000222:	4a58      	ldr	r2, [pc, #352]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOG_PCLK_DI();
		}else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}
	}
}
 800022a:	e0a3      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a56      	ldr	r2, [pc, #344]	@ (8000388 <GPIO_PeriClockControl+0x184>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000234:	4b53      	ldr	r3, [pc, #332]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000238:	4a52      	ldr	r2, [pc, #328]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000240:	e098      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC){
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a51      	ldr	r2, [pc, #324]	@ (800038c <GPIO_PeriClockControl+0x188>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800024a:	4b4e      	ldr	r3, [pc, #312]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800024e:	4a4d      	ldr	r2, [pc, #308]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000256:	e08d      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD){
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4d      	ldr	r2, [pc, #308]	@ (8000390 <GPIO_PeriClockControl+0x18c>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000260:	4b48      	ldr	r3, [pc, #288]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000264:	4a47      	ldr	r2, [pc, #284]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800026c:	e082      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a48      	ldr	r2, [pc, #288]	@ (8000394 <GPIO_PeriClockControl+0x190>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000276:	4b43      	ldr	r3, [pc, #268]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027a:	4a42      	ldr	r2, [pc, #264]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000282:	e077      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF){
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a44      	ldr	r2, [pc, #272]	@ (8000398 <GPIO_PeriClockControl+0x194>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800028c:	4b3d      	ldr	r3, [pc, #244]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000290:	4a3c      	ldr	r2, [pc, #240]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000298:	e06c      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG){
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a3f      	ldr	r2, [pc, #252]	@ (800039c <GPIO_PeriClockControl+0x198>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002a2:	4b38      	ldr	r3, [pc, #224]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a6:	4a37      	ldr	r2, [pc, #220]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ae:	e061      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH){
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3b      	ldr	r2, [pc, #236]	@ (80003a0 <GPIO_PeriClockControl+0x19c>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d15d      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 80002b8:	4b32      	ldr	r3, [pc, #200]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a31      	ldr	r2, [pc, #196]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002c4:	e056      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA){
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000380 <GPIO_PeriClockControl+0x17c>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002d4:	f023 0301 	bic.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002da:	e04b      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB){
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a2a      	ldr	r2, [pc, #168]	@ (8000388 <GPIO_PeriClockControl+0x184>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a26      	ldr	r2, [pc, #152]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f0:	e040      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <GPIO_PeriClockControl+0x188>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80002fa:	4b22      	ldr	r3, [pc, #136]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a21      	ldr	r2, [pc, #132]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000300:	f023 0304 	bic.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000306:	e035      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD){
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a21      	ldr	r2, [pc, #132]	@ (8000390 <GPIO_PeriClockControl+0x18c>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000316:	f023 0308 	bic.w	r3, r3, #8
 800031a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800031c:	e02a      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE){
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <GPIO_PeriClockControl+0x190>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000326:	4b17      	ldr	r3, [pc, #92]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032a:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800032c:	f023 0310 	bic.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000332:	e01f      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a18      	ldr	r2, [pc, #96]	@ (8000398 <GPIO_PeriClockControl+0x194>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000340:	4a10      	ldr	r2, [pc, #64]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000342:	f023 0320 	bic.w	r3, r3, #32
 8000346:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000348:	e014      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG){
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a13      	ldr	r2, [pc, #76]	@ (800039c <GPIO_PeriClockControl+0x198>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a0b      	ldr	r2, [pc, #44]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 8000358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800035e:	e009      	b.n	8000374 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH){
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a0f      	ldr	r2, [pc, #60]	@ (80003a0 <GPIO_PeriClockControl+0x19c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d105      	bne.n	8000374 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <GPIO_PeriClockControl+0x180>)
 800036e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40020000 	.word	0x40020000
 8000384:	40023800 	.word	0x40023800
 8000388:	40020400 	.word	0x40020400
 800038c:	40020800 	.word	0x40020800
 8000390:	40020c00 	.word	0x40020c00
 8000394:	40021000 	.word	0x40021000
 8000398:	40021400 	.word	0x40021400
 800039c:	40021800 	.word	0x40021800
 80003a0:	40021c00 	.word	0x40021c00

080003a4 <GPIO_Init>:

/*
 * Initialise the configuration of the pins
 * TODO: Ergänzen Sie die fehlenden Befehle!
 */
void GPIO_Init(GPIO_Handle_t *pGPIO_Handle){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	// Init clock
	/* note for gpio addr to rcc pin */
	//GPIO_RegDef_t* RCC = RCC_BASEADDR;
	//RCC->AHB1ENR = (0b1 << GPIO_BASEADDR_TO_CODE(pGPIO_Handle->pGPIOx));

	GPIO_PeriClockControl(pGPIO_Handle->pGPIOx, pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681a      	ldr	r2, [r3, #0]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	795b      	ldrb	r3, [r3, #5]
 80003b4:	4619      	mov	r1, r3
 80003b6:	4610      	mov	r0, r2
 80003b8:	f7ff ff24 	bl	8000204 <GPIO_PeriClockControl>

	// Configuration of the pins as INPUT- or OUTPUT-Mode
	if(pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	795b      	ldrb	r3, [r3, #5]
 80003c0:	2b03      	cmp	r3, #3
 80003c2:	d817      	bhi.n	80003f4 <GPIO_Init+0x50>
		pGPIO_Handle->pGPIOx->MODER = (pGPIO_Handle->pGPIOx->MODER & ~(0b11 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2))) | pGPIO_Handle->GPIO_PinConfig.GPIO_PinMode << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	7912      	ldrb	r2, [r2, #4]
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	2103      	movs	r1, #3
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	43d2      	mvns	r2, r2
 80003d8:	401a      	ands	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	795b      	ldrb	r3, [r3, #5]
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	791b      	ldrb	r3, [r3, #4]
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	4619      	mov	r1, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	430a      	orrs	r2, r1
 80003f2:	601a      	str	r2, [r3, #0]
	{
		/* Hier folgt in Pratkikum 3 die Interrupt-Funktionalität */
	}

	// OUTPUT-Speed setzen:
	pGPIO_Handle->pGPIOx->OSPEEDR = (pGPIO_Handle->pGPIOx->OSPEEDR & ~(0b11 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2))) | pGPIO_Handle->GPIO_PinConfig.GPIO_PinSpeed << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	7912      	ldrb	r2, [r2, #4]
 80003fe:	0052      	lsls	r2, r2, #1
 8000400:	2103      	movs	r1, #3
 8000402:	fa01 f202 	lsl.w	r2, r1, r2
 8000406:	43d2      	mvns	r2, r2
 8000408:	401a      	ands	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	799b      	ldrb	r3, [r3, #6]
 800040e:	4619      	mov	r1, r3
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	791b      	ldrb	r3, [r3, #4]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	fa01 f303 	lsl.w	r3, r1, r3
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	430a      	orrs	r2, r1
 8000422:	609a      	str	r2, [r3, #8]
	// Pull-Up-/Pull-Down setzen:
	pGPIO_Handle->pGPIOx->PUPDR = (pGPIO_Handle->pGPIOx->PUPDR & ~(0b11 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2))) | pGPIO_Handle->GPIO_PinConfig.GPIO_PinPuPdControl << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber * 2);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	7912      	ldrb	r2, [r2, #4]
 800042e:	0052      	lsls	r2, r2, #1
 8000430:	2103      	movs	r1, #3
 8000432:	fa01 f202 	lsl.w	r2, r1, r2
 8000436:	43d2      	mvns	r2, r2
 8000438:	401a      	ands	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	79db      	ldrb	r3, [r3, #7]
 800043e:	4619      	mov	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	430a      	orrs	r2, r1
 8000452:	60da      	str	r2, [r3, #12]
	// Output-Modus setzen:
	pGPIO_Handle->pGPIOx->OTYPER = (pGPIO_Handle->pGPIOx->OTYPER & ~(0b1 << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber ))) | pGPIO_Handle->GPIO_PinConfig.GPIO_PinOPType << (pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber );
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	7912      	ldrb	r2, [r2, #4]
 800045e:	4611      	mov	r1, r2
 8000460:	2201      	movs	r2, #1
 8000462:	408a      	lsls	r2, r1
 8000464:	43d2      	mvns	r2, r2
 8000466:	401a      	ands	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	7a1b      	ldrb	r3, [r3, #8]
 800046c:	4619      	mov	r1, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	4619      	mov	r1, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	430a      	orrs	r2, r1
 800047e:	605a      	str	r2, [r3, #4]
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <GPIO_WriteToOutputPin>:

/*
 * Write value to the pin
 * TODO: Vervollständigen Sie die Funktion.
 */
void GPIO_WriteToOutputPin(GPIO_Handle_t *pGPIO_Handle, uint8_t Value) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
    pGPIO_Handle->pGPIOx->ODR = (uint16_t)((pGPIO_Handle->pGPIOx->ODR & ~(0b1 << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber)) | (Value) << pGPIO_Handle->GPIO_PinConfig.GPIO_PinNumber);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	b29a      	uxth	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2301      	movs	r3, #1
 80004a4:	408b      	lsls	r3, r1
 80004a6:	b29b      	uxth	r3, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	4013      	ands	r3, r2
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	78fb      	ldrb	r3, [r7, #3]
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	7909      	ldrb	r1, [r1, #4]
 80004b6:	408b      	lsls	r3, r1
 80004b8:	b29b      	uxth	r3, r3
 80004ba:	4313      	orrs	r3, r2
 80004bc:	b29a      	uxth	r2, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	615a      	str	r2, [r3, #20]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(uint16_t time) { //in seconds
 80004d0:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80004d4:	b085      	sub	sp, #20
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	4603      	mov	r3, r0
 80004da:	80fb      	strh	r3, [r7, #6]
	//dying inside
	for(volatile uint64_t i = 0; i < 1000000 * time; i++);
 80004dc:	f04f 0200 	mov.w	r2, #0
 80004e0:	f04f 0300 	mov.w	r3, #0
 80004e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80004e8:	e007      	b.n	80004fa <delay+0x2a>
 80004ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80004ee:	f112 0801 	adds.w	r8, r2, #1
 80004f2:	f143 0900 	adc.w	r9, r3, #0
 80004f6:	e9c7 8902 	strd	r8, r9, [r7, #8]
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	4a08      	ldr	r2, [pc, #32]	@ (8000520 <delay+0x50>)
 80004fe:	fb02 f303 	mul.w	r3, r2, r3
 8000502:	17da      	asrs	r2, r3, #31
 8000504:	461c      	mov	r4, r3
 8000506:	4615      	mov	r5, r2
 8000508:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800050c:	42a2      	cmp	r2, r4
 800050e:	41ab      	sbcs	r3, r5
 8000510:	d3eb      	bcc.n	80004ea <delay+0x1a>
}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800051e:	4770      	bx	lr
 8000520:	000f4240 	.word	0x000f4240

08000524 <three>:
			led_val ^= 0x1;
		}
	}
}

void three() {
 8000524:	b580      	push	{r7, lr}
 8000526:	b090      	sub	sp, #64	@ 0x40
 8000528:	af00      	add	r7, sp, #0
	//Aufgabe 3
	//output pin anmachen c6 / led rot
	GPIO_PinConfig_t config_c6 = {GPIO_PIN_NO_6, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
 800052a:	4a58      	ldr	r2, [pc, #352]	@ (800068c <three+0x168>)
 800052c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000530:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000534:	6018      	str	r0, [r3, #0]
 8000536:	3304      	adds	r3, #4
 8000538:	7019      	strb	r1, [r3, #0]
	GPIO_Handle_t Handle_c6 = {GPIOC, config_c6};
 800053a:	4b55      	ldr	r3, [pc, #340]	@ (8000690 <three+0x16c>)
 800053c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800053e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000542:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000546:	e892 0003 	ldmia.w	r2, {r0, r1}
 800054a:	6018      	str	r0, [r3, #0]
 800054c:	3304      	adds	r3, #4
 800054e:	7019      	strb	r1, [r3, #0]
	GPIO_Init(&Handle_c6);
 8000550:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff25 	bl	80003a4 <GPIO_Init>
	//output pin anmachen c5 / led gelb
	GPIO_PinConfig_t config_c5 = {GPIO_PIN_NO_5, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
 800055a:	4a4e      	ldr	r2, [pc, #312]	@ (8000694 <three+0x170>)
 800055c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000564:	6018      	str	r0, [r3, #0]
 8000566:	3304      	adds	r3, #4
 8000568:	7019      	strb	r1, [r3, #0]
	GPIO_Handle_t Handle_c5 = {GPIOC, config_c5};
 800056a:	4b49      	ldr	r3, [pc, #292]	@ (8000690 <three+0x16c>)
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800057a:	6018      	str	r0, [r3, #0]
 800057c:	3304      	adds	r3, #4
 800057e:	7019      	strb	r1, [r3, #0]
	GPIO_Init(&Handle_c5);
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff ff0d 	bl	80003a4 <GPIO_Init>

	//output pin anmachen c4 / led grün
	GPIO_PinConfig_t config_c8 = {GPIO_PIN_NO_8, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
 800058a:	4a43      	ldr	r2, [pc, #268]	@ (8000698 <three+0x174>)
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000594:	6018      	str	r0, [r3, #0]
 8000596:	3304      	adds	r3, #4
 8000598:	7019      	strb	r1, [r3, #0]
	GPIO_Handle_t Handle_c8 = {GPIOC, config_c8};
 800059a:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <three+0x16c>)
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	f107 0210 	add.w	r2, r7, #16
 80005a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005aa:	6018      	str	r0, [r3, #0]
 80005ac:	3304      	adds	r3, #4
 80005ae:	7019      	strb	r1, [r3, #0]
	GPIO_Init(&Handle_c8);
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff fef6 	bl	80003a4 <GPIO_Init>

	uint8_t state = 0x00;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	while(1) {
	        switch(state) {
 80005be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	d852      	bhi.n	800066c <three+0x148>
 80005c6:	a201      	add	r2, pc, #4	@ (adr r2, 80005cc <three+0xa8>)
 80005c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	08000601 	.word	0x08000601
 80005d4:	08000625 	.word	0x08000625
 80005d8:	08000649 	.word	0x08000649
	            case 0:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x0);
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff ff51 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c5, 0x0);
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff4b 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c6, 0x1);
 80005f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005f6:	2101      	movs	r1, #1
 80005f8:	4618      	mov	r0, r3
 80005fa:	f7ff ff45 	bl	8000488 <GPIO_WriteToOutputPin>
	                break;
 80005fe:	e035      	b.n	800066c <three+0x148>
	            case 1:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x0);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff3f 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c5, 0x1);
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	2101      	movs	r1, #1
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff39 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c6, 0x1);
 8000616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800061a:	2101      	movs	r1, #1
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ff33 	bl	8000488 <GPIO_WriteToOutputPin>
	                break;
 8000622:	e023      	b.n	800066c <three+0x148>
	            case 2:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x1);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2101      	movs	r1, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ff2d 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c5, 0x0);
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f7ff ff27 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c6, 0x0);
 800063a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff21 	bl	8000488 <GPIO_WriteToOutputPin>
	                break;
 8000646:	e011      	b.n	800066c <three+0x148>
	            case 3:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x0);
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff1b 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c5, 0x1);
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	2101      	movs	r1, #1
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ff15 	bl	8000488 <GPIO_WriteToOutputPin>
	                GPIO_WriteToOutputPin(&Handle_c6, 0x0);
 800065e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff0f 	bl	8000488 <GPIO_WriteToOutputPin>
	                break;
 800066a:	bf00      	nop
	        }
	        state = (state + 1) % 4;
 800066c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000670:	3301      	adds	r3, #1
 8000672:	425a      	negs	r2, r3
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	f002 0203 	and.w	r2, r2, #3
 800067c:	bf58      	it	pl
 800067e:	4253      	negpl	r3, r2
 8000680:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	        delay(2);
 8000684:	2002      	movs	r0, #2
 8000686:	f7ff ff23 	bl	80004d0 <delay>
	        switch(state) {
 800068a:	e798      	b.n	80005be <three+0x9a>
 800068c:	08000770 	.word	0x08000770
 8000690:	40020800 	.word	0x40020800
 8000694:	08000778 	.word	0x08000778
 8000698:	08000780 	.word	0x08000780

0800069c <main>:
	    }
}

int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	//two();
	three();
 80006a0:	f7ff ff40 	bl	8000524 <three>

	return 0;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopForever+0xa>)
 	ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff ffdd 	bl	800069c <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
 	ldr r2, =_sidata
 80006f0:	08000790 	.word	0x08000790
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	2000001c 	.word	0x2000001c

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4d0d      	ldr	r5, [pc, #52]	@ (8000738 <__libc_init_array+0x38>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	@ (800073c <__libc_init_array+0x3c>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	2600      	movs	r6, #0
 800070c:	42a6      	cmp	r6, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	4d0b      	ldr	r5, [pc, #44]	@ (8000740 <__libc_init_array+0x40>)
 8000712:	4c0c      	ldr	r4, [pc, #48]	@ (8000744 <__libc_init_array+0x44>)
 8000714:	f000 f818 	bl	8000748 <_init>
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	10a4      	asrs	r4, r4, #2
 800071c:	2600      	movs	r6, #0
 800071e:	42a6      	cmp	r6, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f855 3b04 	ldr.w	r3, [r5], #4
 8000728:	4798      	blx	r3
 800072a:	3601      	adds	r6, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000732:	4798      	blx	r3
 8000734:	3601      	adds	r6, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000788 	.word	0x08000788
 800073c:	08000788 	.word	0x08000788
 8000740:	08000788 	.word	0x08000788
 8000744:	0800078c 	.word	0x0800078c

08000748 <_init>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr

08000754 <_fini>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr
