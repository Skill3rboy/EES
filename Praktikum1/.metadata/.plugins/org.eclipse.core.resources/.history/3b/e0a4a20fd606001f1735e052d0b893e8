/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include "GPIO_Driver.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(uint16_t time) { //in seconds
	//dying inside
	for(volatile uint64_t i = 0; i < 1000000 * time; i++);
}

void two() {
	//Aufgabe 2
	//configure input pin (c8 / ext button)
	GPIO_PinConfig_t config_c13 = {GPIO_PIN_NO_13, GPIO_MODE_IN, GPIO_SPEED_HIGH, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
	GPIO_Handle_t Handle_c13 = {GPIOC, config_c13};
	GPIO_Init(&Handle_c13);

	//output pin anmachen c6 / led
	GPIO_PinConfig_t config_c6 = {GPIO_PIN_NO_6, GPIO_MODE_OUT, GPIO_SPEED_HIGH, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
	GPIO_Handle_t Handle_c6 = {GPIOC, config_c6};
	GPIO_Init(&Handle_c6);

	uint8_t led_val = 0x00;
	//save current state for falling edge check etc.
	uint8_t state = 0x00;
 //Alte zustand speichern
	while(1) {
		//pin abfragen
		if(GPIO_ReadFromInputPin(&Handle_c13)) {
			//output pin setzen, falls pin c8 == 1
			GPIO_WriteToOutputPin(&Handle_c6, led_val);
			led_val ^= 0x1;
		}
	}
}

void three() {
	//Aufgabe 3
	//output pin anmachen c6 / led rot
	GPIO_PinConfig_t config_c6 = {GPIO_PIN_NO_6, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
	GPIO_Handle_t Handle_c6 = {GPIOC, config_c6};
	GPIO_Init(&Handle_c6);
	//output pin anmachen c5 / led gelb
	GPIO_PinConfig_t config_c5 = {GPIO_PIN_NO_5, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
	GPIO_Handle_t Handle_c5 = {GPIOC, config_c5};
	GPIO_Init(&Handle_c5);

	//output pin anmachen c4 / led grÃ¼n
	GPIO_PinConfig_t config_c8 = {GPIO_PIN_NO_8, GPIO_MODE_OUT, GPIO_SPEED_MEDIUM, GPIO_PIN_PD, GPIO_OP_TYPE_PP};
	GPIO_Handle_t Handle_c8 = {GPIOC, config_c8};
	GPIO_Init(&Handle_c8);

	uint8_t state = 0x00;

	while(1) {
	        switch(state) {
	            case 0:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x1);
	                GPIO_WriteToOutputPin(&Handle_c5, 0x1);
	                GPIO_WriteToOutputPin(&Handle_c6, 0x0);
	                break;
	            case 1:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x1);
	                GPIO_WriteToOutputPin(&Handle_c5, 0x0);
	                GPIO_WriteToOutputPin(&Handle_c6, 0x0);
	                break;
	            case 2:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x0);
	                GPIO_WriteToOutputPin(&Handle_c5, 0x1);
	                GPIO_WriteToOutputPin(&Handle_c6, 0x1);
	                break;
	            case 3:
	                GPIO_WriteToOutputPin(&Handle_c8, 0x1);
	                GPIO_WriteToOutputPin(&Handle_c5, 0x0);
	                GPIO_WriteToOutputPin(&Handle_c6, 0x1);
	                break;
	        }
	        state = (state + 1) % 4;
	        delay(2);
	    }
}

int main(void)
{
	//two();
	three();

	return 0;
}
